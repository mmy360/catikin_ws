# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from op3_online_walking_module_msgs/Step2DArray.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import op3_online_walking_module_msgs.msg

class Step2DArray(genpy.Message):
  _md5sum = "598423594f1c61377b299ae8d55d0f04"
  _type = "op3_online_walking_module_msgs/Step2DArray"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float64 step_time
Step2D[] footsteps_2d

================================================================================
MSG: op3_online_walking_module_msgs/Step2D
#2D StepData

geometry_msgs/Pose2D step2d   # step pose as relative offset to last leg


# which leg to be used (left/right/no, see below)
uint8 moving_foot   

uint8 LEFT_FOOT_SWING  = 1 # Left foot constant
uint8 RIGHT_FOOT_SWING = 2 # Right foot constant
uint8 STANDING         = 3 # Standing constant

================================================================================
MSG: geometry_msgs/Pose2D
# This expresses a position and orientation on a 2D manifold.

float64 x
float64 y
float64 theta"""
  __slots__ = ['step_time','footsteps_2d']
  _slot_types = ['float64','op3_online_walking_module_msgs/Step2D[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       step_time,footsteps_2d

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Step2DArray, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.step_time is None:
        self.step_time = 0.
      if self.footsteps_2d is None:
        self.footsteps_2d = []
    else:
      self.step_time = 0.
      self.footsteps_2d = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_get_struct_d().pack(self.step_time))
      length = len(self.footsteps_2d)
      buff.write(_struct_I.pack(length))
      for val1 in self.footsteps_2d:
        _v1 = val1.step2d
        _x = _v1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.theta))
        buff.write(_get_struct_B().pack(val1.moving_foot))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.footsteps_2d is None:
        self.footsteps_2d = None
      end = 0
      start = end
      end += 8
      (self.step_time,) = _get_struct_d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.footsteps_2d = []
      for i in range(0, length):
        val1 = op3_online_walking_module_msgs.msg.Step2D()
        _v2 = val1.step2d
        _x = _v2
        start = end
        end += 24
        (_x.x, _x.y, _x.theta,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 1
        (val1.moving_foot,) = _get_struct_B().unpack(str[start:end])
        self.footsteps_2d.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_get_struct_d().pack(self.step_time))
      length = len(self.footsteps_2d)
      buff.write(_struct_I.pack(length))
      for val1 in self.footsteps_2d:
        _v3 = val1.step2d
        _x = _v3
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.theta))
        buff.write(_get_struct_B().pack(val1.moving_foot))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.footsteps_2d is None:
        self.footsteps_2d = None
      end = 0
      start = end
      end += 8
      (self.step_time,) = _get_struct_d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.footsteps_2d = []
      for i in range(0, length):
        val1 = op3_online_walking_module_msgs.msg.Step2D()
        _v4 = val1.step2d
        _x = _v4
        start = end
        end += 24
        (_x.x, _x.y, _x.theta,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 1
        (val1.moving_foot,) = _get_struct_B().unpack(str[start:end])
        self.footsteps_2d.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_d = None
def _get_struct_d():
    global _struct_d
    if _struct_d is None:
        _struct_d = struct.Struct("<d")
    return _struct_d
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
